trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
# -----------------------------
# Stage 1: Build & Push Docker
# -----------------------------
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: 'Self-Hosted'
    steps:
    - task: Docker@2
      displayName: Build and Push to Docker Hub
      inputs:
        command: buildAndPush
        repository: 'el2toro/yarpapigateway'
        dockerfile: '$(Build.SourcesDirectory)/ApiGateway/YarpApiGateway/Dockerfile'
        tags: |
          $(Build.BuildId)
        buildContext: '$(Build.SourcesDirectory)'
        containerRegistry: 'dockerHubServiceConnection'  

# -----------------------------
# Stage 2: Deploy to Azure
# -----------------------------
- stage: Deploy
  displayName: Deploy to Azure
  dependsOn: Build
  jobs:
  - deployment: DeployToACI
    displayName: Deploy to Azure Container Instances
    pool:
      name: 'Self-Hosted'
    environment: 'dev'   # optional, can create an environment in Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: Deploy YARP Gateway to ACI
            inputs:
              azureSubscription: 'resourceManagerServiceConnection'   # Azure DevOps service connection
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Variables
                RESOURCE_GROUP=pmplatform-rg
                CONTAINER_NAME=yarp-gateway
                IMAGE=el2toro/pmplatform:$(Build.BuildId)

                # Create resource group if it doesn't exist
                az group create --name $RESOURCE_GROUP --location eastus

                # Deploy container instance
                az container create 
                  --resource-group $RESOURCE_GROUP 
                  --name $CONTAINER_NAME 
                  --image $IMAGE 
                  --dns-name-label $CONTAINER_NAME 
                  --ports 8080 8081 
                  --cpu 1 --memory 1 
                  --restart-policy Always
